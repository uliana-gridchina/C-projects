Препроцессорные директивы
#define: определяет макрос или препроцессорный идентификатор
#undef: отменяет определение макроса или идентификатора
#ifdef: проверяет, определен ли идентификатор
#ifndef: проверяет неопределенности идентификатор
#include: включает текст из файла
#if: проверяет условие выражение (как условная конструкция if)
#else: задает альтернативное условие для #if
#endif: окончание условной директивы #if
#elif: задает альтернативное условие для #if
#line: меняет номер следующей ниже строки

Директивы условной компиляции
#if условие
    код
#elif условие
    код
#else
    код
#endif
если значение истинное то в итоговый исходный код вставляется то что в в if

проверяет определен ли индетификатор (#define индентификатор):
#ifdef идентификатор
    код
#endif
обратное к #ifdef:
#ifndef
проверяет определены ли сразу два идентификатора:
#if defined идентификатор && defined идентификатор

Файлы

FILE *fopen (const char *filename, const char *mode)
r, rb, r+, r+b - если файла не существует программа завершится ошибкой

int fclose (FILE *stream)
0 – если поток данных и связанный с ним файл успешно закрыты
EOF (-1) – если во время работы функции возникла ошибка

char *fgets (char *str, int n, FILE *stream)
Функция fgets считывает из потока данных строку пока не встретится символ "новая строка" или не закончится файл или пока длина считываемой строки не превысит ограничение аргумента n
В случае успешного чтения строки, возвращается указатель на массив, в который помещены считанные данные
Если достигнут конец файла, а данные не были считаны, то возвращается NULL
Если при чтении данные произошла ошибка, то возвращается NULL

int fseek(FILE *stream, long int offset, int whence)
whence: SEEK_SET, SEEK_END, SEEK_CUR
При открытии потока в режимах r и w указатель текущей позиции устанавливается на начальный байт потока. При открытии в режиме a указатель устанавливается на конец файла сразу за конечным байтом
*аналог смещения в начало, вместо fseek(file, 0, SEEK_SET), - rewind(file)
long ftell(FILE *) - получение текущей позиции

size_t fwrite( const void *buffer, size_t size, size_t count, FILE *stream )

size_t fread( const void *buffer, size_t size, size_t count, FILE *stream )

int fileno(FILE *stream)
получение дискриптра (системный номер файла)

int ftruncate(int fd, off_t length)
изменение размера файла до length
Если до этого файл был больше указанного размера, все лишние данные будут утеряны. Если файл был меньше, он будет увеличен, а дополнительная часть будет заполнена нулевыми байтами («\0»)
Для ftruncate() файл должен быть открыт на запись
При успешном выполнении возвращается 0. В случае ошибки возвращается -1